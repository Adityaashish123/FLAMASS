#include <vector>
using namespace std;

bool dfs(int node, vector<vector<int>>& adj, vector<int>& visited) {
    visited[node] = 1; 

    for (int neighbor : adj[node]) {
        if (visited[neighbor] == 1) return true; // cycle found
        if (visited[neighbor] == 0 && dfs(neighbor, adj, visited)) return true;
    }

    visited[node] = 2;
    return false;
}

bool hasCircularDependency(int n, vector<vector<int>>& edges) {
    vector<vector<int>> adj(n);
    for (auto& edge : edges) {
        int from = edge[0], to = edge[1];
        adj[from].push_back(to);
    }

    vector<int> visited(n, 0); // 0 = unvisited, 1 = visiting, 2 = visited

    for (int i = 0; i < n; ++i) {
        if (visited[i] == 0 && dfs(i, adj, visited)) return true;
    }

    return false;
}
